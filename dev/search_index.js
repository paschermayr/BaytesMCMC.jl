var documenterSearchIndex = {"docs":
[{"location":"intro/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"Yet to be properly done.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = BaytesMCMC","category":"page"},{"location":"#BaytesMCMC","page":"Home","title":"BaytesMCMC","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BaytesMCMC.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [BaytesMCMC]","category":"page"},{"location":"#BaytesMCMC.DEFAULT_MAX_TREE_DEPTH","page":"Home","title":"BaytesMCMC.DEFAULT_MAX_TREE_DEPTH","text":"Default maximum depth for trees.\n\n\n\n\n\n","category":"constant"},{"location":"#BaytesMCMC.MAX_DIRECTIONS_DEPTH","page":"Home","title":"BaytesMCMC.MAX_DIRECTIONS_DEPTH","text":"Maximum number of iterations\n\n\n\n\n\n","category":"constant"},{"location":"#BaytesMCMC.REACHED_MAX_DEPTH","page":"Home","title":"BaytesMCMC.REACHED_MAX_DEPTH","text":"Sentinel value for reaching maximum depth.\n\n\n\n\n\n","category":"constant"},{"location":"#BaytesMCMC.Adaptionˢˡᵒʷ","page":"Home","title":"BaytesMCMC.Adaptionˢˡᵒʷ","text":"Explore typical set and tune MCMC parameter(initial bias rapidly vanishes and the estimators become much more accurate.)\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.Adaptionᶠᵃˢᵗ","page":"Home","title":"BaytesMCMC.Adaptionᶠᵃˢᵗ","text":"Tune final stepsize for fixed Covariance Matrix.\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.ConfigCustom","page":"Home","title":"BaytesMCMC.ConfigCustom","text":"Default Configuration for Custom sampler\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.ConfigHMC","page":"Home","title":"BaytesMCMC.ConfigHMC","text":"struct ConfigHMC{K<:KineticEnergy, S<:ConfigStepnumber} <: BaytesCore.AbstractConfiguration\n\nDefault Configuration for HMC sampler.\n\nFields\n\nδ::Float64\nTarget Acceptance Rate\nwindow::ConfigTuningWindow\nDefault size for tuning iterations in each cycle.\nenergy::KineticEnergy\nKinetic Energy used in Hamiltonian: GaussianKineticEnergy\nstepnumber::ConfigStepnumber\nStep Number adaption\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.ConfigMALA","page":"Home","title":"BaytesMCMC.ConfigMALA","text":"struct ConfigMALA <: BaytesCore.AbstractConfiguration\n\nDefault Configuration for MALA sampler.\n\nFields\n\nδ::Float64\nTarget Acceptance Rate\nwindow::ConfigTuningWindow\nDefault size for tuning iterations in each cycle.\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.ConfigMetropolis","page":"Home","title":"BaytesMCMC.ConfigMetropolis","text":"Default Configuration for Metropolis sampler\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.ConfigNUTS","page":"Home","title":"BaytesMCMC.ConfigNUTS","text":"struct ConfigNUTS{K<:KineticEnergy} <: BaytesCore.AbstractConfiguration\n\nDefault Configuration for NUTS sampler.\n\nFields\n\nδ::Float64\nTarget Acceptance Rate\nwindow::ConfigTuningWindow\nDefault size for tuning iterations in each cycle.\nenergy::KineticEnergy\nKinetic Energy used in Hamiltonian: GaussianKineticEnergy\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.ConfigProposal","page":"Home","title":"BaytesMCMC.ConfigProposal","text":"struct ConfigProposal{A<:UpdateBool, M<:MatrixMetric}\n\nDefault configuration for posterior Covariance Matrix adaption.\n\nFields\n\nproposaladaption::UpdateBool\nBoolean if Posterior covariance for proposal steps is adapted.\nmetric::MatrixMetric\nCovariance estimate metric: MDense(), MDiagonal(), MUnit()\nshrinkage::Float64\nShrinkage parameter towards Diagonal Matrix with equal variance\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.ConfigStepnumber","page":"Home","title":"BaytesMCMC.ConfigStepnumber","text":"struct ConfigStepnumber{A<:UpdateBool}\n\nDefault configuration for stepsize adaption.\n\nFields\n\nstepnumberadaption::UpdateBool\nStep Number adaption\nsteps::Int64\nInitial number of Steps\nmaxsteps::Int64\nMaximal number of steps\n∫dt::Float64\nDesired Integration time\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.ConfigStepsize","page":"Home","title":"BaytesMCMC.ConfigStepsize","text":"struct ConfigStepsize{A<:UpdateBool, B<:UpdateBool}\n\nDefault configuration for stepsize adaption.\n\nFields\n\nϵ::Float64\nInitial Discretization size\nstepsizeadaption::UpdateBool\nStep size adaption\ninitialstepsize::UpdateBool\nBoolean if initial stepsize should be estimated\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.ConfigTuningWindow","page":"Home","title":"BaytesMCMC.ConfigTuningWindow","text":"struct ConfigTuningWindow\n\nDefault configuration for tuning iterations in each cycle.\n\nFields\n\nwindow::Vector{Int64}\nMCMC Phase tuning window lengths, i.e: 5 = 5 repeats of second window in phasenames\nbuffer::Vector{Int64}\n(Increasing) Length of windows, i.e.: if window=3, buffer=10 -> total window length: 10-20-30\nphasenames::Vector{SamplingPhase}\nName of phasenames, currently supported: Warmup(), Adaptionˢˡᵒʷ(), Adaptionᶠᵃˢᵗ(), Exploration()\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.Custom","page":"Home","title":"BaytesMCMC.Custom","text":"mutable struct Custom{R<:ModelWrappers.ℓDensityResult, P} <: MCMCKernel\n\nCustom algorithm container.\n\nFields\n\nresult::ModelWrappers.ℓDensityResult\nCached Result of last propagation step.\nproposal::Any\nCallable struct/closure/function of result.θᵤ that returns proposal distribution.\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.DiagnosticsCustom","page":"Home","title":"BaytesMCMC.DiagnosticsCustom","text":"struct DiagnosticsCustom <: MCMCKernelDiagnostics\n\nDefault Configuration for Custom sampler.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.DiagnosticsHMC","page":"Home","title":"BaytesMCMC.DiagnosticsHMC","text":"struct DiagnosticsHMC{T<:AbstractFloat} <: MCMCKernelDiagnostics\n\nDiagnostics fields for HMC sampler.\n\nFields\n\nϵ::AbstractFloat\nDiscretization size\nsteps::Int64\nNumber of Leapfrog steps\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.DiagnosticsMALA","page":"Home","title":"BaytesMCMC.DiagnosticsMALA","text":"struct DiagnosticsMALA{T<:AbstractFloat} <: MCMCKernelDiagnostics\n\nDiagnostics for MALA sampler.\n\nFields\n\nϵ::AbstractFloat\nDiscretization size\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.DiagnosticsMetropolis","page":"Home","title":"BaytesMCMC.DiagnosticsMetropolis","text":"struct DiagnosticsMetropolis{T<:AbstractFloat} <: MCMCKernelDiagnostics\n\nDefault Configuration for Metropolis sampler.\n\nFields\n\nϵ::AbstractFloat\nDiscretization size\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.DiagnosticsNUTS","page":"Home","title":"BaytesMCMC.DiagnosticsNUTS","text":"struct DiagnosticsNUTS{T<:AbstractFloat} <: MCMCKernelDiagnostics\n\nDiagnostics fields for NUTS sampler.\n\nFields\n\nℓH::AbstractFloat\nLog density (negative energy).\ndepth::Int64\nDepth of the tree.\ntermination::InvalidTree\nReason for termination. See InvalidTree and REACHED_MAX_DEPTH.\nacceptance_rate::AbstractFloat\nAcceptance rate statistic.\nϵ::AbstractFloat\nDiscretization size\nsteps::Int64\nNumber of leapfrog steps evaluated.\ndirections::Directions\nDirections for tree doubling (useful for debugging).\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.Directions","page":"Home","title":"BaytesMCMC.Directions","text":"struct Directions\n\nInternal type implementing random directions.\n\nFields\n\nflags::UInt32\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.DualAverage","page":"Home","title":"BaytesMCMC.DualAverage","text":"struct DualAverage{T<:AbstractFloat}\n\nContains DualAverage tuning information and runtime parameter.\n\nFields\n\nadaption::DualAverageParameter\nμ::AbstractFloat\nUpwards bias for target acceptance rate - proposals are biased upwards to stay away from 0.\nt::Int64\nTime update, starts with 0\nH̄::AbstractFloat\nAverage part of first equation in Hoffman(2014), p 1607, (6)\nlogϵ::AbstractFloat\nLog step\nlogϵ̄::AbstractFloat\nAVERAGED log step\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.DualAverageParameter","page":"Home","title":"BaytesMCMC.DualAverageParameter","text":"struct DualAverageParameter{T<:AbstractFloat}\n\nContains information for default Dual Averaging algorithm.\n\nFields\n\nδ::AbstractFloat\nTarget acceptance rate\nγ::AbstractFloat\nRegularization scale\nκ::AbstractFloat\nRelaxation exponent - for Average log step size\nt₀::Int64\nOffset\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.EuclideanKineticEnergy","page":"Home","title":"BaytesMCMC.EuclideanKineticEnergy","text":"Gaussian Kinetic Energy, independent of position parameter.\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.Exploration","page":"Home","title":"BaytesMCMC.Exploration","text":"Sample parameter with tuned MCMC (gradually reducing the precision error of the MCMC estimators towards zero.)\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.GaussianKineticEnergy","page":"Home","title":"BaytesMCMC.GaussianKineticEnergy","text":"mutable struct GaussianKineticEnergy{T<:(AbstractMatrix), S<:(AbstractMatrix)} <: EuclideanKineticEnergy\n\nGaussian kinetic energy, which is independent of q.\n\nFields\n\nΣ::AbstractMatrix\nInverse Mass Matrix Σ ~ Posterior Covariance Matrix\nMᶜʰᵒˡ::AbstractMatrix\nCholesky decomposition of Mass matrix M, s.t. Mᶜʰᵒˡ*Mᶜʰᵒˡ'=M. Used to generate random draws\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.GaussianKineticEnergy-Tuple{AbstractMatrix}","page":"Home","title":"BaytesMCMC.GaussianKineticEnergy","text":"Gaussian kinetic energy with the given inverse covariance matrix Σ.\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.GeneralizedTurnStatistic","page":"Home","title":"BaytesMCMC.GeneralizedTurnStatistic","text":"struct GeneralizedTurnStatistic{T}\n\nStatistics for the identification of turning points. See Betancourt (2017, appendix), and subsequent discussion of improvements at https://discourse.mc-stan.org/t/nuts-misses-u-turns-runs-in-circles-until-max-treedepth/9727/. Momenta p₋ and p₊ are kept so that they can be added to ρ when combining turn statistics. Turn detection is always done by combine_turn_statistics, which returns nothing in case of turning. A GeneralizedTurnStatistic should always correspond to a trajectory that is not turning (or a leaf node, where the concept does not apply).\n\nFields\n\nρ₋::Any\nmomentum at the left edge of the trajectory\nρ♯₋::Any\np♯ at the left edge of the trajectory\nρ₊::Any\nmomentum at the right edge of the trajectory\nρ♯₊::Any\np♯ at the right edge of the trajectory\nρₛ::Any\nsum of momenta along trajectory\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.HMC","page":"Home","title":"BaytesMCMC.HMC","text":"mutable struct HMC{R<:ModelWrappers.ℓObjectiveResult, D<:ModelWrappers.AbstractDifferentiableTune, C<:KineticEnergy, T<:UpdateBool} <: MCMCKernel\n\nHMC - Container used throughout sampling process.\n\nFields\n\nresult::ModelWrappers.ℓObjectiveResult\nTarget result stored for caching.\ndiff::ModelWrappers.AbstractDifferentiableTune\nDifferentiation tuning struct.\nenergy::KineticEnergy\nEnergy used for Hamiltonian.\nstepnumber::StepNumberTune\nTuning struct for discretization steps\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.Hamiltonian","page":"Home","title":"BaytesMCMC.Hamiltonian","text":"struct Hamiltonian{E<:KineticEnergy, D<:ModelWrappers.DiffObjective}\n\nHamiltonian struct that holds Kinetic energy and log target density function.\n\nFields\n\nK::KineticEnergy\nThe kinetic energy specification.\nobjective::ModelWrappers.DiffObjective\nDifferentiable log target density of model, see ModelWrappers.\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.InitialStepsizeSearch","page":"Home","title":"BaytesMCMC.InitialStepsizeSearch","text":"struct InitialStepsizeSearch{T<:AbstractFloat}\n\nInitial Step Size Search factors.\n\nFields\n\na_min::AbstractFloat\nLowest local acceptance rate.\na_max::AbstractFloat\nHighest local acceptance rate.\nϵ₀::AbstractFloat\nInitial stepsize.\nC::AbstractFloat\nScale factor for initial bracketing, > 1.\nmaxiter_crossing::Int64\nMaximum number of iterations for initial bracketing.\nmaxiter_bisect::Int64\nMaximum number of iterations for bisection.\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.InvalidTree","page":"Home","title":"BaytesMCMC.InvalidTree","text":"struct InvalidTree\n\nInformation about an invalid (sub)tree, using positions relative to the starting node.\n\nWhen left < right, this tree was turning.\nWhen left == right, this is a divergent node.\nleft == 1 && right == 0 is used as a sentinel value for reaching maximum depth without\n\nencountering any invalid trees (see REACHED_MAX_DEPTH. All other left > right values are disallowed.\n\nFields\n\nleft::Int64\nright::Int64\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.KineticEnergy","page":"Home","title":"BaytesMCMC.KineticEnergy","text":"Kinetic Energy in HMC setting.\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.MALA","page":"Home","title":"BaytesMCMC.MALA","text":"mutable struct MALA{M<:ModelWrappers.ℓGradientResult, D<:ModelWrappers.AbstractDifferentiableTune} <: MCMCKernel\n\nMALA algorithm container.\n\nFields\n\nresult::ModelWrappers.ℓGradientResult\nCached Result of last propagation step.\ndiff::ModelWrappers.AbstractDifferentiableTune\nDifferentiation tuning container\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.MCMC","page":"Home","title":"BaytesMCMC.MCMC","text":"struct MCMC{M<:MCMCKernel, N<:MCMCTune} <: BaytesCore.AbstractAlgorithm\n\nStores information for proposal step.\n\nFields\n\nkernel::MCMCKernel\nMCMC sampler\ntune::MCMCTune\nTuning configuration for kernel.\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.MCMCConstructor","page":"Home","title":"BaytesMCMC.MCMCConstructor","text":"Callable struct to make initializing MCMC sampler easier in sampling library.\n\nExamples\n\n\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.MCMCDefault","page":"Home","title":"BaytesMCMC.MCMCDefault","text":"struct MCMCDefault{K<:NamedTuple, S<:ConfigStepsize, P<:ConfigProposal, G}\n\nDefault arguments for MCMC constructor.\n\nFields\n\nkernel::NamedTuple\nIndividual keyword arguments for tuning different MCMC kernels.\nstepsize::ConfigStepsize\nStepsize default configuration for adaption.\nproposal::ConfigProposal\nProposal distribution default configuration for adaption.\nGradientBackend::Any\nGradient backend used in MCMC step. Not used if Metropolis sampler is chosen.\nTunedModel::Bool\nBoolean if initial parameter are fixed or resampled.\ngenerated::Bool\nBoolean if generate(_rng, objective) for corresponding model is stored in MCMC Diagnostics.\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.MCMCDiagnostics","page":"Home","title":"BaytesMCMC.MCMCDiagnostics","text":"struct MCMCDiagnostics{R<:AbstractFloat, E<:MCMCKernelDiagnostics, T, G} <: BaytesCore.AbstractDiagnostics\n\nMCMC Diagnostics container.\n\nFields\n\nℓθᵤ::AbstractFloat\nEvaluation of target function at current iteration.\ntemperature::AbstractFloat\nTemperature for log posterior evaluation\ndivergence::Bool\nBoolean if diverged.\naccept::BaytesCore.AcceptStatistic\nAcceptance Rate of current step.\nsampler::MCMCKernelDiagnostics\nSampler specific diagnostics.\nprediction::Any\nPredicted sample of model.\ngenerated::Any\nGenerated quantities specified for objective\niter::Int64\nCurrent iteration number.\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.MCMCTune","page":"Home","title":"BaytesMCMC.MCMCTune","text":"struct MCMCTune{A<:UpdateBool, F<:AbstractFloat, T<:ModelWrappers.Tagged, E<:Tuple, P<:Proposal} <: BaytesCore.AbstractTune\n\nMCMC Tuning container.\n\nFields\n\ntagged::ModelWrappers.Tagged\nTagged Parameter.\nphase::PhaseTune\nCurrent Phase in MCMC Cycle\nstepsize::StepSizeTune\nStepsize container\nproposal::Proposal\nInformation for posterior covariance estimate\ngenerated::Bool\nBoolean if generated quantities should be generated while sampling\niter::BaytesCore.Iterator\nCurrent iteration number\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.MatrixMetric","page":"Home","title":"BaytesMCMC.MatrixMetric","text":"abstract type MatrixMetric\n\nChoice for Posterior Covariance Matrix adaption.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.MatrixTune","page":"Home","title":"BaytesMCMC.MatrixTune","text":"struct MatrixTune{A<:MatrixMetric}\n\nMass and Covariance Matrix specification for MCMC sampler, relevant for Euclidean Metric.\n\nFields\n\nmetric::MatrixMetric\nDense, Diagonal or Unit Mass Matrix.\nshrinkage::Float64\nShrinkage parameter for Covariance estimation.\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.Metropolis","page":"Home","title":"BaytesMCMC.Metropolis","text":"mutable struct Metropolis{R<:ModelWrappers.ℓDensityResult} <: MCMCKernel\n\nMetropolis algorithm container.\n\nFields\n\nresult::ModelWrappers.ℓDensityResult\nCached Result of last propagation step.\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.NUTS","page":"Home","title":"BaytesMCMC.NUTS","text":"mutable struct NUTS{R<:ModelWrappers.ℓObjectiveResult, D<:ModelWrappers.AbstractDifferentiableTune, C<:KineticEnergy} <: MCMCKernel\n\nNUTS - Container used throughout sampling process.\n\nFields\n\nresult::ModelWrappers.ℓObjectiveResult\nTarget result stored for caching.\ndiff::ModelWrappers.AbstractDifferentiableTune\nDifferentiation tuning struct.\nenergy::KineticEnergy\nEnergy used for Hamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.PhasePoint","page":"Home","title":"BaytesMCMC.PhasePoint","text":"struct PhasePoint{T<:ModelWrappers.ℓObjectiveResult, S<:Real}\n\nA point in phase space, consists of a position ModelWrappers.ℓObjectiveResult and a momentum ρ.\n\nFields\n\nresult::ModelWrappers.ℓObjectiveResult\nModelWrappers.ℓObjectiveResult container\nρ::Vector{S} where S<:Real\nMomentum\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.PhaseTune","page":"Home","title":"BaytesMCMC.PhaseTune","text":"struct PhaseTune{T<:Tuple}\n\nInformation about current SamplingPhase.\n\nFields\n\nupdate::BaytesCore.Updater\nBoolean if current iteration needs update.\niter::BaytesCore.Iterator\nCounts current iteration in phase.\ncounter::BaytesCore.Iterator\nMCMC Phases ~ counter = current cyle in slices/name/iterations.\nslices::Vector{Int64}\nVector of MCMC iterations at each phase.\nname::Tuple\nName of Sampling phases.\niterations::Vector{Int64}\nCounts total iterations.\nwindow::Vector{Int64}\nCounts cycles in adaption phases Warmup(), Adaptionˢˡᵒʷ(), Adaptionᶠᵃˢᵗ(),     i.e., 1-5-1 means 1 window init, 5 adapt, 1 exploration.\nbuffer::Vector{Int64}\nCounts iteration in each cycle for adaption phases Warmup(), Adaptionˢˡᵒʷ(), Adaptionᶠᵃˢᵗ(),     i.e., 50-25-50 means 1 time 50, 5 times 25*i, i in 1:5, 1 time 50.\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.Proposal","page":"Home","title":"BaytesMCMC.Proposal","text":"mutable struct Proposal{A<:UpdateBool, T<:AbstractFloat, P<:(AbstractMatrix), C<:(AbstractMatrix), M<:MatrixTune}\n\nProposal distribution container.\n\nFields\n\nadaption::UpdateBool\nCheck if adaption true in current iteration\nchain::Matrix{T} where T<:AbstractFloat\nθᵤ samples in current MCMC Phase, used for Σ estimation\nΣ::AbstractMatrix\nPosterior Covariance estimate\nΣ⁻¹ᶜʰᵒˡ::AbstractMatrix\nCholesky decomposition of Inverse Posterior Covariance matrix Σ, s.t. Σ⁻¹ᶜʰᵒˡ*Σ⁻¹ᶜʰᵒˡ'=Σ⁻¹. Used to generate random draws in HMC/NUTS sampler.\nmatrixtune::MatrixTune\nTuning parameter for Σ estimation\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.SamplingPhase","page":"Home","title":"BaytesMCMC.SamplingPhase","text":"abstract type SamplingPhase\n\nSampling Container that determines tuning updates.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.StepNumberTune","page":"Home","title":"BaytesMCMC.StepNumberTune","text":"mutable struct StepNumberTune{T<:UpdateBool}\n\nContains information for number of discretization steps in MCMC algorithm.\n\nFields\n\nadaption::UpdateBool\nIf true, number of steps will be adapted.\nsteps::Int64\nNumber of discretization steps.\nstepsᵐᵃˣ::Int64\nMaximum number of discretization steps.\n∫dt::Float64\nDesired Integration time\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.StepSizeTune","page":"Home","title":"BaytesMCMC.StepSizeTune","text":"mutable struct StepSizeTune{A<:UpdateBool, F<:AbstractFloat}\n\nTuning stepsize parameter for MCMC algorithm.\n\nFields\n\nadaption::UpdateBool\nIf true, stepsize will be adapted.\ndualaverage::DualAverage\nDualaverage struct\nϵ::AbstractFloat\nCurrent stepsize\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.TrajectoryCustom","page":"Home","title":"BaytesMCMC.TrajectoryCustom","text":"struct TrajectoryCustom{P, F<:ModelWrappers.ℓObjectiveResult}\n\nRepresentation of a trajectory.\n\nFields\n\nproposal::Any\nProposal distribution\nresult₀::ModelWrappers.ℓObjectiveResult\nLog Target result at initial point, see ModelWrappersesTools.\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.TrajectoryHMC","page":"Home","title":"BaytesMCMC.TrajectoryHMC","text":"struct TrajectoryHMC{S<:Hamiltonian, F<:AbstractFloat}\n\nRepresentation of a trajectory, ie a Hamiltonian with a discrete integrator that also checks for divergence.\n\nFields\n\nH::Hamiltonian\nHamiltonian.\nℓH₀::AbstractFloat\nLog density of negative log energy at initial point.\nϵ::AbstractFloat\nStepsize for leapfrog.\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.TrajectoryMALA","page":"Home","title":"BaytesMCMC.TrajectoryMALA","text":"struct TrajectoryMALA{S<:(AbstractMatrix), F<:ModelWrappers.ℓObjectiveResult, T<:AbstractFloat}\n\nRepresentation of a trajectory.\n\nFields\n\nΣ::AbstractMatrix\nProposal Covariance\nresult₀::ModelWrappers.ℓObjectiveResult\nLog Target result at initial point, see ModelWrappers.\nϵ::AbstractFloat\nDiscretization size\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.TrajectoryMetropolis","page":"Home","title":"BaytesMCMC.TrajectoryMetropolis","text":"struct TrajectoryMetropolis{S<:(AbstractMatrix), F<:ModelWrappers.ℓObjectiveResult, T<:AbstractFloat}\n\nRepresentation of a trajectory.\n\nFields\n\nΣ::AbstractMatrix\nProposal Covariance\nresult₀::ModelWrappers.ℓObjectiveResult\nLog Target result at initial point, see ModelWrappersesTools.\nϵ::AbstractFloat\nDiscretization size\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.TrajectoryNUTS","page":"Home","title":"BaytesMCMC.TrajectoryNUTS","text":"Representation of a trajectory, ie a Hamiltonian with a discrete integrator that also checks for divergence.\n\n\n\n\n\n","category":"type"},{"location":"#BaytesMCMC.Warmup","page":"Home","title":"BaytesMCMC.Warmup","text":"Find/converges to the typical set (estimators suffer from initial but ultimately transient biases)\n\n\n\n\n\n","category":"type"},{"location":"#BaytesCore.generate_showvalues-Tuple{D} where D<:DiagnosticsCustom","page":"Home","title":"BaytesCore.generate_showvalues","text":"generate_showvalues(diagnostics)\n\n\nShow relevant diagnostic results.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.generate_showvalues-Tuple{D} where D<:DiagnosticsHMC","page":"Home","title":"BaytesCore.generate_showvalues","text":"generate_showvalues(diagnostics)\n\n\nShow relevant diagnostic results.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.generate_showvalues-Tuple{D} where D<:DiagnosticsMALA","page":"Home","title":"BaytesCore.generate_showvalues","text":"generate_showvalues(diagnostics)\n\n\nShow relevant diagnostic results.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.generate_showvalues-Tuple{D} where D<:DiagnosticsMetropolis","page":"Home","title":"BaytesCore.generate_showvalues","text":"generate_showvalues(diagnostics)\n\n\nShow relevant diagnostic results.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.generate_showvalues-Tuple{D} where D<:DiagnosticsNUTS","page":"Home","title":"BaytesCore.generate_showvalues","text":"generate_showvalues(diagnostics)\n\n\nShow relevant diagnostic results.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.infer-Union{Tuple{D}, Tuple{Random.AbstractRNG, MCMC, ModelWrappers.ModelWrapper, D}} where D","page":"Home","title":"BaytesCore.infer","text":"Infer type of predictions of MCMC sampler.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.infer-Union{Tuple{D}, Tuple{Random.AbstractRNG, Type{BaytesCore.AbstractDiagnostics}, MCMC, ModelWrappers.ModelWrapper, D}} where D","page":"Home","title":"BaytesCore.infer","text":"infer(_rng, diagnostics, mcmc, model, data)\n\n\nInfer MCMC diagnostics type.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.init-Tuple{Type{BaytesCore.AbstractConfiguration}, Type{Custom}, ModelWrappers.Objective, ConfigProposal}","page":"Home","title":"BaytesCore.init","text":"init(, mcmc, objective, proposalconfig; δ, window, proposal)\n\n\nInitialize Custom custom configurations.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.init-Tuple{Type{BaytesCore.AbstractConfiguration}, Type{HMC}, ModelWrappers.Objective, ConfigProposal}","page":"Home","title":"BaytesCore.init","text":"init(, mcmc, objective, proposalconfig; δ, window, energy, stepnumber)\n\n\nInitialize HMC custom configurations.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.init-Tuple{Type{BaytesCore.AbstractConfiguration}, Type{MALA}, ModelWrappers.Objective, ConfigProposal}","page":"Home","title":"BaytesCore.init","text":"init(, mcmc, objective, proposalconfig; δ, window)\n\n\nInitialize Mala custom configurations.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.init-Tuple{Type{BaytesCore.AbstractConfiguration}, Type{Metropolis}, ModelWrappers.Objective, ConfigProposal}","page":"Home","title":"BaytesCore.init","text":"init(, mcmc, objective, proposalconfig; δ, window)\n\n\nInitialize Metropolis custom configurations.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.init-Tuple{Type{BaytesCore.AbstractConfiguration}, Type{NUTS}, ModelWrappers.Objective, ConfigProposal}","page":"Home","title":"BaytesCore.init","text":"init(, mcmc, objective, proposalconfig; δ, window, energy)\n\n\nInitialize NUTS custom configurations.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.init-Union{Tuple{T}, Tuple{Type{DualAverage}, Any, T}} where T<:AbstractFloat","page":"Home","title":"BaytesCore.init","text":"init(, δ, ϵ; multiplier)\n\n\nInitialize new DualAverage struct.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.propagate-Tuple{Random.AbstractRNG, Custom, MCMCTune, ModelWrappers.Objective}","page":"Home","title":"BaytesCore.propagate","text":"propagate Custom sampler forward\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.propagate-Tuple{Random.AbstractRNG, HMC, MCMCTune, ModelWrappers.Objective}","page":"Home","title":"BaytesCore.propagate","text":"propagate(_rng, kernel, tune, objective)\n\n\nPropagate forward one HMC step.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.propagate-Tuple{Random.AbstractRNG, MALA, MCMCTune, ModelWrappers.Objective}","page":"Home","title":"BaytesCore.propagate","text":"propagate(_rng, kernel, tune, objective)\n\n\nPropagate forward one MALA step.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.propagate-Tuple{Random.AbstractRNG, Metropolis, MCMCTune, ModelWrappers.Objective}","page":"Home","title":"BaytesCore.propagate","text":"propagate Metropolis sampler forward\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.propagate-Tuple{Random.AbstractRNG, NUTS, MCMCTune, ModelWrappers.Objective}","page":"Home","title":"BaytesCore.propagate","text":"propagate(_rng, kernel, tune, objective)\n\n\nPropagate forward one proposal step.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.propose!-Union{Tuple{U}, Tuple{F}, Tuple{D}, Tuple{Random.AbstractRNG, MCMC, ModelWrappers.ModelWrapper, D}, Tuple{Random.AbstractRNG, MCMC, ModelWrappers.ModelWrapper, D, F}, Tuple{Random.AbstractRNG, MCMC, ModelWrappers.ModelWrapper, D, F, U}} where {D, F<:AbstractFloat, U<:UpdateBool}","page":"Home","title":"BaytesCore.propose!","text":"propose!(_rng, mcmc, model, data)\npropose!(_rng, mcmc, model, data, temperature)\npropose!(_rng, mcmc, model, data, temperature, update)\n\n\nInplace version of propose.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.propose-Tuple{Random.AbstractRNG, MCMC, ModelWrappers.Objective}","page":"Home","title":"BaytesCore.propose","text":"propose(_rng, mcmc, objective)\n\n\nPropose new parameter with mcmc sampler. If update=true, objective function will be updated with input model and data.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.results-Union{Tuple{M}, Tuple{T}, Tuple{AbstractVector{M}, MCMC, Integer, Vector{T}}} where {T<:Real, M<:MCMCDiagnostics}","page":"Home","title":"BaytesCore.results","text":"results(diagnosticsᵛ, mcmc, Ndigits, quantiles)\n\n\nPrint result for a single trace.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.results-Union{Tuple{T}, Tuple{F}, Tuple{AbstractArray{DiagnosticsNUTS{F}, 1}, Integer, Vector{T}}} where {F<:AbstractFloat, T<:Real}","page":"Home","title":"BaytesCore.results","text":"results(diagnostics, Ndigits, quantiles)\n\n\nSummarize results of Vector of diagnostics.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.update!-Tuple{PhaseTune, Int64}","page":"Home","title":"BaytesCore.update!","text":"update!(phase, iter)\n\n\nUpdate current MCMC Phase.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.update!-Union{Tuple{P}, Tuple{P, MDense}} where P<:Proposal","page":"Home","title":"BaytesCore.update!","text":"update!(proposal, metric)\nupdate!(proposal)\n\n\nCalculate regularized Covariance Matrix and Cholesky decomposition.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.update!-Union{Tuple{P}, Tuple{P, UpdateFalse, Any, Any, Any}} where P<:Proposal","page":"Home","title":"BaytesCore.update!","text":"update!(proposal)\nupdate!(proposal, proposalupdate, θᵤ, phasename, phase)\n\n\nUpdate Proposal according to current tuning phase.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.update!-Union{Tuple{T}, Tuple{N}, Tuple{P}, Tuple{P, Val{true}, N, PhaseTune, AbstractVector{T}}} where {P<:Proposal, N<:Union{Adaptionˢˡᵒʷ, Adaptionᶠᵃˢᵗ, Warmup}, T<:Real}","page":"Home","title":"BaytesCore.update!","text":"update!(proposal)\nupdate!(proposal, phaseupdate, phasename, phase, θᵤ)\n\n\nUpdate Proposal with new parameter θᵤ.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.update!-Union{Tuple{T}, Tuple{N}, Tuple{StepSizeTune, UpdateTrue, T, N, Val{false}}} where {N<:Union{Adaptionˢˡᵒʷ, Adaptionᶠᵃˢᵗ, Warmup}, T<:AbstractFloat}","page":"Home","title":"BaytesCore.update!","text":"update!(stepsize, stepsizeadaption, α, samplingphase, iterationupdate)\n\n\nUpdate stepsize based on acceptance ratio α.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.update!-Union{Tuple{T}, Tuple{S}, Tuple{MCMCTune, S, T}} where {S<:ModelWrappers.ℓObjectiveResult, T<:Real}","page":"Home","title":"BaytesCore.update!","text":"update!(tune, result, acceptrate)\n\n\nUpdate MCMC tuning fields at current iteration.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesCore.update-Union{Tuple{T}, Tuple{DualAverage, T}} where T<:AbstractFloat","page":"Home","title":"BaytesCore.update","text":"update(dualaverage, acceptratio)\n\n\nUpdate DualAverage struct.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC._infer_generated-Union{Tuple{D}, Tuple{Random.AbstractRNG, MCMC, ModelWrappers.ModelWrapper, D}} where D","page":"Home","title":"BaytesMCMC._infer_generated","text":"_infer_generated(_rng, mcmc, model, data)\n\n\nInfer type of generated quantities of MCMC sampler.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC._is_turning-Tuple{Any, Any, Any}","page":"Home","title":"BaytesMCMC._is_turning","text":"Internal test for turning. See Betancourt (2017, appendix).\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.acceptance_rate-Tuple{AcceptanceStatistic}","page":"Home","title":"BaytesMCMC.acceptance_rate","text":"acceptance_rate(A)\n\n\nReturn the acceptance rate (a Real betwen 0 and 1).\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.adjacent_tree-Tuple{Random.AbstractRNG, TrajectoryNUTS, PhasePoint, Int64, Int64, Bool}","page":"Home","title":"BaytesMCMC.adjacent_tree","text":"adjacent_tree(_rng, trajectory, z, i, depth, is_forward)\n\n\nTraverse the tree of given depth adjacent to point z in trajectory. is_forward specifies the direction, rng is used for random numbers in combine_proposals. i is an integer position relative to the initial node (0). The first value is either\n\nan InvalidTree, indicating the first divergent node or turning subtree that was\n\nencounteted and invalidated this tree.\n\na tuple of `(ζ, ω, τ, z′, i′), with\nζ: the proposal from the tree.\nω: the log weight of the subtree that corresponds to the proposal\nτ: turn statistics\nz′: the last node of the tree\ni′: the position of the last node relative to the initial node.\n\nThe second value is always the visited node statistic.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.biased_progressive_logprob2-Union{Tuple{T}, Tuple{Bool, T, T}, Tuple{Bool, T, T, Any}} where T<:Real","page":"Home","title":"BaytesMCMC.biased_progressive_logprob2","text":"biased_progressive_logprob2(bias, ω₁, ω₂)\nbiased_progressive_logprob2(bias, ω₁, ω₂, ω)\n\n\nGiven (relative) log probabilities ω₁ and ω₂, return the log probabiliy of drawing a sample from the second (logprob2). When bias, biases towards the second argument, introducing anti-correlations.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.bisect_stepsize","page":"Home","title":"BaytesMCMC.bisect_stepsize","text":"bisect_stepsize(parameters, A, ϵ₀, ϵ₁)\nbisect_stepsize(parameters, A, ϵ₀, ϵ₁, Aϵ₀)\nbisect_stepsize(parameters, A, ϵ₀, ϵ₁, Aϵ₀, Aϵ₁)\n\n\nReturn the desired stepsize ϵ by bisection.\n\nExamples\n\n\n\n\n\n\n\n","category":"function"},{"location":"#BaytesMCMC.calculate_logprob2-Tuple{TrajectoryNUTS, Any, Any, Any, Any}","page":"Home","title":"BaytesMCMC.calculate_logprob2","text":"calculate_logprob2(_, is_doubling, ω₁, ω₂, ω)\n\n\nCalculate the log probability if selecting the subtree corresponding to ω₂. Being the log of a probability, it is always ≤ 0, but implementations are allowed to return and accept values > 0 and treat them as 0. When is_doubling, the tree corresponding to ω₂ was obtained from a doubling step (this can be relevant eg for biased progressive sampling). The value ω = logaddexp(ω₁, ω₂) is provided for avoiding redundant calculations. See biased_progressive_logprob2 for an implementation.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.calculate_ρ♯","page":"Home","title":"BaytesMCMC.calculate_ρ♯","text":"Return p♯ = M⁻¹⋅p, used for turn diagnostics.\n\n\n\n\n\n","category":"function"},{"location":"#BaytesMCMC.chain!-Union{Tuple{N}, Tuple{P}, Tuple{P, N, Integer}} where {P<:Proposal, N<:Union{Adaptionˢˡᵒʷ, Warmup}}","page":"Home","title":"BaytesMCMC.chain!","text":"chain!(proposal, phasename, Niterations)\n\n\nAssign new chain buffer with dedicated size.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.combine_proposals-Union{Tuple{T}, Tuple{Random.AbstractRNG, TrajectoryNUTS, PhasePoint, PhasePoint, T, Any}} where T<:Real","page":"Home","title":"BaytesMCMC.combine_proposals","text":"combine_proposals(_rng, trajectory, z₁, z₂, logprob2, is_forward)\n\n\nCombine two proposals ζ₁, ζ₂ on trajectory, with log probability logprob2 for selecting ζ₂.  ζ₁ is before ζ₂ iff is_forward.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.combine_turn_statistics-Tuple{TrajectoryNUTS, GeneralizedTurnStatistic, GeneralizedTurnStatistic}","page":"Home","title":"BaytesMCMC.combine_turn_statistics","text":"combine_turn_statistics(trajectory, x, y)\n\n\nCombine turn statistics on trajectory. Implementation can assume that the trees that correspond to the turn statistics have the same ordering. When\n\nτ = combine_turn_statistics(trajectory, τ₁, τ₂)\nis_turning(trajectory, τ)\n\nthe combined turn statistic τ is guaranteed not to escape the caller, so it can eg change type.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.combine_turn_statistics_in_direction-Tuple{TrajectoryNUTS, GeneralizedTurnStatistic, GeneralizedTurnStatistic, Bool}","page":"Home","title":"BaytesMCMC.combine_turn_statistics_in_direction","text":"combine_turn_statistics_in_direction(trajectory, τ₁, τ₂, is_forward)\n\n\nCombine turn statistics with the given direction. When is_forward, τ₁ is before τ₂, otherwise after. Internal helper function.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.combine_visited_statistics-Tuple{TrajectoryNUTS, Any, Any}","page":"Home","title":"BaytesMCMC.combine_visited_statistics","text":"combine_visited_statistics(_, v, w)\n\n\nCombine visited node statistics for adjacent trees trajectory. Implementation should be invariant to the ordering of v₁ and v₂ (ie the operation is commutative).\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.customdefaultkernel-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Real","page":"Home","title":"BaytesMCMC.customdefaultkernel","text":"customdefaultkernel(θ)\n\n\nA placeholder function to configure a custom proposal distribution. Can also be a closure that captures, i.e., Σ., or a a callable struct:\n\nExamples\n\n\n#Mixture via callable struct\nstruct MyMixture{W, F, T}\n    weights::W\n    Σ1::F\n    Σ2::T\nend\nfunction (mixture::MyMixture)(θ)\n    @unpack weights, Σ1, Σ2 = mixture\n    return MixtureModel([MvNormal(θ, Σ1), MvNormal(θ, Σ2)], weights)\nend\n\n#Independence sampler via callable struct without extra allocation\nstruct MyIndependenceSampler{W}\n    dist::W\nend\nfunction (sampler::MyIndependenceSampler)(θ)\n    return sampler.dist\nend\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.find_crossing_stepsize","page":"Home","title":"BaytesMCMC.find_crossing_stepsize","text":"find_crossing_stepsize(parameters, A, ϵ₀)\nfind_crossing_stepsize(parameters, A, ϵ₀, Aϵ₀)\n\n\nFind the stepsize for which the local acceptance rate A(ϵ) crosses a.\n\nExamples\n\n\n\n\n\n\n\n","category":"function"},{"location":"#BaytesMCMC.find_initial_stepsize-Tuple{BaytesMCMC.InitialStepsizeSearch, Any}","page":"Home","title":"BaytesMCMC.find_initial_stepsize","text":"find_initial_stepsize(parameters, A)\n\n\nFind an initial stepsize that matches the conditions of parameters (see InitialStepsizeSearch). A is the local acceptance ratio (unbounded).\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.get_acceptrate-Union{Tuple{M}, Tuple{Random.AbstractRNG, HMC, ModelWrappers.Objective, M}} where M<:(AbstractMatrix)","page":"Home","title":"BaytesMCMC.get_acceptrate","text":"get_acceptrate(_rng, kernel, objective, Σ)\n\n\nTune initial step size.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.get_acceptrate-Union{Tuple{M}, Tuple{Random.AbstractRNG, NUTS, ModelWrappers.Objective, M}} where M<:(AbstractMatrix)","page":"Home","title":"BaytesMCMC.get_acceptrate","text":"get_acceptrate(_rng, kernel, objective, Σ)\n\n\nTune initial step size.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.get_Σ-Union{Tuple{T}, Tuple{D}, Tuple{D, T}} where {D<:Union{LinearAlgebra.Diagonal, LinearAlgebra.Symmetric}, T<:Real}","page":"Home","title":"BaytesMCMC.get_Σ","text":"get_Σ(Σ, shrinkage)\n\n\nCalculate regularized Covariance Matrix.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.is_turning-Tuple{TrajectoryNUTS, GeneralizedTurnStatistic}","page":"Home","title":"BaytesMCMC.is_turning","text":"Internal test for turning. See Betancourt (2017, appendix).\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.leaf-Tuple{TrajectoryNUTS, PhasePoint, Any}","page":"Home","title":"BaytesMCMC.leaf","text":"leaf(trajectory, phasepoint, is_initial)\n\n\nInformation for a tree made of a single node. When is_initial == true, this is the first node. The first value is either\n\nnothing for a divergent node,\na tuple containing the proposal ζ, the log weight (probability) of the node ω, the\n\nturn statistics τ (never tested with is_turning for leaf nodes). The second value is the visited node information.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.leaf_acceptance_statistic-Tuple{Any, Any}","page":"Home","title":"BaytesMCMC.leaf_acceptance_statistic","text":"leaf_acceptance_statistic(Δ, is_initial)\n\n\nAcceptance statistic for a leaf. The initial leaf is considered not to be visited.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.leapfrog-Union{Tuple{T}, Tuple{Hamiltonian{<:EuclideanKineticEnergy}, PhasePoint, T}} where T<:Real","page":"Home","title":"BaytesMCMC.leapfrog","text":"leapfrog(H, phasepoint, ϵ)\n\n\nTake a leapfrog step of length ϵ from phasepoint along the Hamiltonian H.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.move-Union{Tuple{T}, Tuple{T, PhasePoint, Bool}} where T<:TrajectoryNUTS","page":"Home","title":"BaytesMCMC.move","text":"move(trajectory, phasepoint, fwd)\n\n\nMove along the trajectory in the specified direction. Return the new position.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.next_direction-Tuple{Directions}","page":"Home","title":"BaytesMCMC.next_direction","text":"next_direction(directions)\n\n\nReturn the next direction flag and the new state of directions. Results are undefined for more than MAX_DIRECTIONS_DEPTH updates.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.print_divergences-Union{Tuple{M}, Tuple{AbstractVector{M}, PhaseTune}} where M<:MCMCDiagnostics","page":"Home","title":"BaytesMCMC.print_divergences","text":"print_divergences(diagnosticsᵛ, phase)\n\n\nPrint all divergences from a vector of MCMC Diagnostics.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.printtune","page":"Home","title":"BaytesMCMC.printtune","text":"printtune(tune)\nprinttune(tune, diagparam)\n\n\nSome basic tuning output figures. Useful for debugging.\n\nExamples\n\n\n\n\n\n\n\n","category":"function"},{"location":"#BaytesMCMC.rand_bool_logprob-Union{Tuple{T}, Tuple{Random.AbstractRNG, T}} where T<:Real","page":"Home","title":"BaytesMCMC.rand_bool_logprob","text":"rand_bool_logprob(_rng, logprob)\n\n\nRandom boolean which is true with the given probability exp(logprob), which can be ≥ 1 in which case no random value is drawn.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.rand_ρ","page":"Home","title":"BaytesMCMC.rand_ρ","text":"Generate a random momentum from a kinetic energy at position ρ.\n\n\n\n\n\n","category":"function"},{"location":"#BaytesMCMC.sample_trajectory-Tuple{Random.AbstractRNG, TrajectoryNUTS, PhasePoint, Directions}","page":"Home","title":"BaytesMCMC.sample_trajectory","text":"sample_trajectory(_rng, trajectory, z, directions)\n\n\nSample a trajectory starting at z, up to max_depth. directions determines the tree expansion directions. Return the following values\n\nζ: proposal from the tree\nv: visited node statistics\ntermination: an InvalidTree (this includes the last doubling step turning, which is technically a valid tree) or REACHED_MAX_DEPTH when all subtrees were valid and no turning happens.\ndepth: the depth of the tree that was sampled from. Doubling steps that lead to an invalid adjacent tree do not contribute to depth.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.sample_tree-Tuple{Random.AbstractRNG, TrajectoryNUTS, PhasePoint}","page":"Home","title":"BaytesMCMC.sample_tree","text":"sample_tree(_rng, trajectory, phasepoint; directions)\n\n\nNo-U-turn Hamiltonian Monte Carlo transition, using Hamiltonian H, starting at evaluated log density position Q, using stepsize ϵ. Parameters of kernel govern the details of tree construction. Return two values, the new evaluated log density position, and tree statistics.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.ℓdensity-Tuple{Hamiltonian{<:EuclideanKineticEnergy}, PhasePoint}","page":"Home","title":"BaytesMCMC.ℓdensity","text":"ℓdensity(H, phasepoint)\n\n\nLog density for Hamiltonian H at phasepoint. If ℓ(q) == -Inf (rejected), skips the kinetic energy calculation.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#BaytesMCMC.∇K","page":"Home","title":"BaytesMCMC.∇K","text":"Calculate the gradient of the logarithm of kinetic energy in momentum ρ.\n\n\n\n\n\n","category":"function"}]
}
